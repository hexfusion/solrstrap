.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::Cardsave 3"
.TH Vend::Payment::Cardsave 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::Cardsave \- Interchange Cardsave Payments Module
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 5
\&    XML::Simple
\&    URI
\&    libwww\-perl
\&    Net::SSLeay
\&        HTTP::Request
.Ve
.PP
Test for current installations, eg: perl \-MXML::Simple \-e 'print \*(L"It works\en\*(R"'
To install perl modules do: \*(L"emerge dev\-perl/XML\-Simple\*(R" on Gentoo, or on other systems do
\&\*(L"perl \-MCPAN \-e  'install XML::Simple'\*(R"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::Cardsave module implements the Cardsave payment routine for use with Interchange.
.PP
#=========================
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Quick start:
.PP
Place this module in <ic_root>/lib/Vend/Payment, and call it in <ic_root>/interchange.cfg with
Require module Vend::Payment::Cardsave. Ensure that your perl installation contains the modules
listed above and their pre-requisites.
.PP
Add a new payment route into catalog.cfg as follows:
Route cardsave id xxx
Route cardsave password xxx
Route cardsave returnurl 'https://domain.tld/cgi/ord/tdscardsavereturn'
.PP
The above are required, while those below are only required if you want to change from the 
default values as noted. These may be overriden at run-time with: [value avs_override_policy].
[value cv2_override_policy] and [value tds_override_policy] respectively.
.PP
Route cardsave avsoverridepolicy \s-1NPPP\s0
Route cardsave cv2overridepolicy \s-1PP\s0
Route cardsave threedsecureoverridepolicy \s-1TRUE\s0
.PP
These next are also optional and allow you to override the default error messages as given in parentheses
with your own error messages to display to errant customers:
Route cardsave main3DSerror (Payment error: )
Route cardsave address_error (Address match failed)
Route cardsave postcode_error (PostalCode match failed)
Route cardsave cv2_error  (Card Security Code match failed)
The displayed message will start with the main3DSerror and append others as appropriate. 
Route cardsave mail_txn_to (email address, defaults to \s-1ORDERS_TO\s0)
Route cardsave mail_txn_approved (1 to email approved orders)
Route cardsave mail_txn_declined (1 to email possibly fraudulent attempts)
.PP
Alter etc/log_transaction to wrap the following code around the \*(L"[charge route...]\*(R" call 
found in ln 172 (or nearby):
	[if scratchd mstatus eq success]
	[tmp name=\*(L"charge_succeed\*(R"][scratch order_id][/tmp]
	[else]
	[tmp name=\*(L"charge_succeed\*(R"][charge route=\*(L"[var \s-1MV_PAYMENT_MODE\s0]\*(R" amount=\*(L"[scratch tmp_remaining]\*(R" order_id=\*(L"[value mv_transaction_id]\*(R"][/tmp]
	[/else]
	[/if]
and change [var \s-1MV_PAYMENT_MODE\s0] above to [value mv_payment_route] if you want to use Paypal or similar in conjunction with this
.PP
Also add these lines just after '&final = yes' near the end of the credit_card section of etc/profiles.order:
&set=mv_payment Cardsave
&set=psp Cardsave
&set=mv_payment_route cardsave
&set=mv_order_route default
&setcheck = end_profile 1
&setcheck = payment_method cardsave
.PP
New fields to put into the transactions table:
psp: [value psp] (type varchar(64))
payment_route: [value mv_payment_route] (type varchar(128))
txtype:  [calc]$Session\->{payment_result}{TxType} || \f(CW$Scratch\fR\->{txtype};[/calc] (type varchar(64))
pares: [calc]$Session\->{payment_result}{PaRes};[/calc] (type text)
md: [calc]$Session\->{payment_result}{\s-1MD\s0};[/calc]  (type varchar(128))
currency_locale: [scratch mv_locale] (type varchar(64))
currency_code: [calc]$Session\->{payment_result}{Currency};[/calc] (type varchar(32))
.PP
\&\s-1NB/\s0 the country code and currency code are both numeric, not alphabetic, and are both '826';
The amount passed to Cardsave is in pennies, so Â£8.24 is passed as 824.
.PP
The card type and card issuer are both available from a special call, and this call is made prior
to the main transaction call. Both values are logged and may be of use in anti-fraud measures.
.PP
There are 2 gateway entry points listed, and each gateway entry point
is tried in turn until one responds, with a 30 second time-out on each. The one that responds on the first
\&'cardpost' call is put in session to become the default for the second call after returning from the \s-1ACS.\s0
These \*(L"gateway entry points\*(R" are actually separate data centres, with hot replication between them, though 
the replication may take a minute or so \- hence the preference to stay with the same gateway entrypoint 
throughout the entire transaction if possible.
.PP
Create a page in pages/ord called tdscardsavereturn.html like so:
<html>
<head>
<link rel=\*(L"stylesheet\*(R" href=\*(L"/images/theme_css.css\*(R">
</head>
<body>
[charge route=\*(L"cardsave\*(R" cardsaverequest=\*(L"tdspost\*(R"]
(some blurb for those who failed at the \s-1ACS\s0 and thus don't get past the [charge ..] line above)
</body>
</html>
.PP
Create a page in pages/ord called tdsfinal.html, which includes this snippet
 	  <tr>
		<td align=center height=600 valign=middle colspan=2 width=800>
		  <iframe src=\*(L"[area ord/tdsauth]\*(R"  frameborder=0 width=800 height=600></iframe>
		</td>
	  </tr>
amongst the standard page elements, so the iframe is populated by the bank's \s-1ACS\s0 page.
.PP
Create another page in pages/ord called tdsauth.html like so:
<table align=\*(L"center\*(R" width=\*(L"100%\*(R">
 <tr>
  <td>
<body onload=\*(L"document.form.\fIsubmit()\fR;\*(R">
<\s-1FORM\s0 name=\*(L"form\*(R" action=\*(L"[scratchd acsurl]\*(R" method=\*(L"\s-1POST\*(R" /\s0>
<input type=\*(L"hidden\*(R" name=\*(L"PaReq\*(R" value=\*(L"[scratch pareq]\*(R" />
<input type=\*(L"hidden\*(R" name=\*(L"TermUrl\*(R" value=\*(L"[scratch termurl]\*(R" />
<input type=\*(L"hidden\*(R" name=\*(L"\s-1MD\*(R"\s0 value=\*(L"[scratch md]\*(R" />
</form>
<div style=\*(L"background:white;border:1px solid blue;\*(R">
<br>
<noscript>
(equivalent form and a blurb for the customer to manually click 'submit')
</noscript>
  </td>
 </tr>
</table>
This page will be replaced by the bank's \s-1ACS\s0 page automagically. If the transaction is
successful at the bank, the customer will see the bank page replaced with the receipt page.
.PP
In the etc/receipt.html page, change the calls to the header and footer like so:
[if type=explicit compare=`$Session\->{payment_result}{SecureStatus} eq '\s-1OK\s0'`]
[else]
\&\f(CW@_NOLEFT_TOP_\fR@
[/else]
[/if]
[if type=explicit compare=`$Session\->{payment_result}{SecureStatus} eq '\s-1OK\s0'`]
[else]
\&\f(CW@_NOLEFT_BOTTOM_\fR@
[/else]
[/if]
so that the receipt page will display properly within the tdsfinal page.
.PP
Test card numbers:
without 3DS: 4976000000003436/452 : street no 32 , postcode \s-1TR148PA,\s0 exp 12/12 gives 'success'
with 3DS: 4976350000006891/341, street no 113, postcode B421SX, exp 12/12 gives 'success'
other cv2s or postcodes should result in failure.
.PP
Virtual terminal operations:
Possible ops are: \s-1REFUND, COLLECTION, VOID, SALE, PREAUTH.\s0
These are all keyed to the value of the \s-1MD\s0 returned from the original 3DSecure transaction
and saved into the transactions table as 'md'. This is read into the module as [value crossreference].
The various ops are read in as [value txtype]. The currency code is taken from the db and
read in as [value iso_currency_code_numeric], defaulting to '826' for \s-1GBP. 
SALE\s0 is used for repeat or recurring billing.
.PP
A possible block of code in a virtual terminal would be this:
<input type=\*(L"hidden\*(R" name=\*(L"mv_payment_route\*(R" value=\*(L"cardsave\*(R">
<input type=\*(L"hidden\*(R" name=\*(L"cardsaverequest\*(R" value=\*(L"crossreferencepost\*(R">
<input type=\*(L"hidden\*(R" name=\*(L"crossreference\*(R" value=\*(L"[sql\-param md]\*(R">
<select name=\*(L"txtype\*(R">
  <option value=\*(L"\s-1PREAUTH\*(R" \s0\*(L"[selected txtype \s-1PREAUTH\s0]\*(R">PreAuth
  <option value=\*(L"\s-1REFUND\*(R" \s0\*(L"[selected txtype \s-1REFUND\s0]\*(R">Refund
  <option value=\*(L"\s-1SALE\*(R" \s0\*(L"[selected txtype \s-1SALE\s0]\*(R">Sale
  <option value=\*(L"\s-1COLLECTION\*(R" \s0\*(L"[selected txtype \s-1COLLECTION\s0]\*(R">Collection
  <option value=\*(L"\s-1VOID\*(R" \s0\*(L"[selected txtype \s-1VOID\s0]\*(R">Void
</select>
.SH "Changelog 090: release candidate"
.IX Header "Changelog 090: release candidate"
098: following the split of LloydsTSB into two separate banks and the issue of new cards,
apparently using Royal Bank of Scotland \s-1BIN\s0 ranges, Cardsave are returning the issuer for
these cards only as a string whereas all other issuers are returned as a hash, contrary
to their \s-1API.\s0 This update handles that situation.
.SH "AUTHORS"
.IX Header "AUTHORS"
Lyn St George <lyn@zolotek.net>
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 107:" 4
.IX Item "Around line 107:"
Non-ASCII character seen before =encoding in 'Â£8.24'. Assuming \s-1ISO8859\-1\s0
