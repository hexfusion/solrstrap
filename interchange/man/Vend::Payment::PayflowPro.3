.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::PayflowPro 3"
.TH Vend::Payment::PayflowPro 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::PayflowPro \- Interchange support for PayPal Payflow Pro HTTPS POST and PayPal Express Checkout
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=payflowpro
\&
\&        or
\&
\&    [charge mode=payflowpro param1=value1 param2=value2]
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 5
\&    The following Perl modules:
\&       LWP
\&       Crypt::SSLeay
\&       HTTP::Request
\&       HTTP::Headers
\&
\&    OpenSSL
.Ve
.PP
PayPal's Payflow Pro \s-1HTTPS POST\s0 does \s-1NOT\s0 require the proprietary binary-only
shared library that was formerly used for the Signio and Verisign Payflow Pro services.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::PayflowPro module implements the \fIpayflowpro()\fR payment routine
for use with Interchange.
.PP
It also allows you to accept PayPal via their Express Checkout (your
PayPal account must be linked to your PayPal Manager account to do so).
.PP
It is compatible on a call level with the other Interchange payment
modules \*(-- in theory (and even usually in practice) you could switch
from a different payment module to PayflowPro with a few configuration
file changes.
.PP
To enable this module, place this directive in \fIinterchange.cfg\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::PayflowPro
.Ve
.PP
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
\&\s-1NOTE:\s0 Make sure CreditCardAuto is off (default in Interchange demos).
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`payflowpro\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \fIcatalog.cfg\fR:
.PP
.Vb 1
\&    Variable  MV_PAYMENT_MODE  payflowpro
.Ve
.PP
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable. For example, the \f(CW\*(C`id\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=payflowpro id=YourPayflowProID]
.Ve
.PP
or
.PP
.Vb 1
\&    Route payflowpro id YourPayflowProID
.Ve
.PP
or with only Payflow Pro as a payment provider
.PP
.Vb 1
\&    Variable MV_PAYMENT_ID YourPayflowProID
.Ve
.PP
The active settings are:
.IP "id" 4
.IX Item "id"
Your account \s-1ID,\s0 supplied by PayPal when you sign up.
Global parameter is \s-1MV_PAYMENT_ID.\s0
.IP "secret" 4
.IX Item "secret"
Your account password, selected by you or provided by PayPal when you sign up.
Global parameter is \s-1MV_PAYMENT_SECRET.\s0
.IP "partner" 4
.IX Item "partner"
Your account partner, selected by you or provided by PayPal when you
sign up. Global parameter is \s-1MV_PAYMENT_PARTNER.\s0
.IP "vendor" 4
.IX Item "vendor"
Your account vendor, selected by you or provided by PayPal when you
sign up. Global parameter is \s-1MV_PAYMENT_VENDOR.\s0
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 7
\&    Interchange         Payflow Pro
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    sale                S
\&    auth                A
\&    credit              C
\&    void                V
\&    settle              D (from previous A trans)
.Ve
.Sp
Default is \f(CW\*(C`auth\*(C'\fR.
.IP "accept_for_review" 4
.IX Item "accept_for_review"
When using Fraud Protection Service, controls whether to accept orders
that triggered filters. Set to 1 to accept. You should also consider
changing the \f(CW\*(C`status\*(C'\fR column of the transactions table to show that the
order was flagged. Something like this in \fIetc/log_transaction\fR:
.Sp
.Vb 1
\&    status: [calc]return $Session\->{payment_result}{RESULT} =~ /^12[67]$/ ? \*(Aqflagged\*(Aq : \*(Aqpending\*(Aq;[/calc]
.Ve
.IP "check_sub" 4
.IX Item "check_sub"
Name of a Sub or GlobalSub to be called after the result hash has been
received from PayPal. A reference to the modifiable result hash is
passed into the subroutine, and it should return true (in the Perl truth
sense) if its checks were successful, or false if not. The transaction type
is passed in as a second arg, if needed.
.Sp
This can come in handy since, strangely, PayPal has no option to decline
a charge when \s-1AVS\s0 or \s-1CSC\s0 data come back negative.
.Sp
If you want to fail based on a bad \s-1AVS\s0 check, make sure you're only
doing an auth \*(-- \fBnot a sale\fR, or your customers would get charged on
orders that fail the \s-1AVS\s0 check and never get logged in your system!
.Sp
Add the parameters like this:
.Sp
.Vb 1
\&    Route  payflowpro  check_sub  avs_check
.Ve
.Sp
This is a matching sample subroutine you could put in interchange.cfg:
.Sp
.Vb 12
\&    GlobalSub <<EOR
\&    sub avs_check {
\&        my ($result) = @_;
\&        my ($addr, $zip) = @{$result}{qw( AVSADDR AVSZIP )};
\&        return 1 if $addr eq \*(AqY\*(Aq or $zip eq \*(AqY\*(Aq;
\&        return 1 if $addr eq \*(AqX\*(Aq and $zip eq \*(AqX\*(Aq;
\&        return 1 if $addr !~ /\eS/ and $zip !~ /\eS/;
\&        $result\->{RESULT} = 112;
\&        $result\->{RESPMSG} = "The billing address you entered does not match the cardholder\*(Aqs billing address";
\&        return 0;
\&    }
\&    EOR
.Ve
.Sp
That would work equally well as a Sub in catalog.cfg. It will succeed if
either the address or zip is 'Y', or if both are unknown. If it fails,
it sets the result code and error message in the result hash using
PayPal's own (otherwise unused) 112 result code, meaning \f(CW\*(C`Failed AVS
check\*(C'\fR.
.Sp
Of course you can use this sub to do any other post-processing you
want as well.
.PP
\&\fBThe following are specific to PayPal Express Checkout:\fR
.IP "returnurl" 4
.IX Item "returnurl"
\&\fBRequired.\fR \s-1URL\s0 where the buyer will return to. Usually set to something like:
.Sp
.Vb 1
\&    _\|_SECURE_SERVER_\|_\|_\|_CGI_URL_\|_/ord/paypalgetrequest
.Ve
.Sp
Create the page in \fIpages/ord/paypalgetrequest.html\fR with contents of:
.Sp
.Vb 5
\&    [charge route="payflowpro" action="get"]
\&    [if value country eq GB]
\&        [value name=country set="UK" hide=1]
\&    [/if]
\&    [bounce href="[area href=ord/paypalcheckout]"]
.Ve
.Sp
also, set up \fIpages/ord/paypalsetrequest.html\fR, with contents of:
.Sp
.Vb 1
\&    [charge route="payflowpro" action="set"]
\&
\&    [if session paypal_token]
\&        [bounce href="https://www.[if variable INDEV]sandbox.[/if]paypal.com/cgi\-bin/webscr?cmd=_express\-checkout&token=[data session paypal_token]"]
\&    [else]
\&        [bounce href="[area href=_\|_CHECKOUT_PAGE_\|_]"]
\&    [/else]
\&    [/if]
.Ve
.Sp
Then add the PayPal Checkout button to your basket page:
.Sp
.Vb 1
\&    <a href="[area ord/paypalsetrequest]"><img src="https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif" alt="Checkout with PayPal"></a>
.Ve
.Sp
Add a \fIpages/ord/paypalcheckout.html\fR page similar to your regular
checout page, but you may want to disable the editing of the address
fields. In addition, you should remove the
\&\fIinclude/checkout/payment_method\fR and
\&\fIinclude/checout/*_browser_payment\fR includes, and change the final
\&\f(CW\*(C`Place Order\*(C'\fR button to include the order profile:
.Sp
.Vb 9
\&    [button 
\&        name="mv_click"
\&        text="[L]Place Order[/L]"
\&        wait\-text="\-\- [L]Wait[/L] \-\-"
\&        form=checkout
\&    ]
\&        mv_order_profile=paypal
\&        mv_todo=submit
\&    [/button]
.Ve
.Sp
In \fIetc/log_transction\fR, immediately after the 
[elsif variable \s-1MV_PAYMENT_MODE\s0]
line, look for the [charge] tag, and alter it to include the \f(CW\*(C`action\*(C'\fR
parameter, like so:
.Sp
.Vb 1
\&    [charge route="[var MV_PAYMENT_MODE]" action="[if value mv_order_profile eq paypal]do[/if]" amount="...
.Ve
.Sp
Add into the end of the \f(CW\*(C`[import table=transactions type=LINE continue=NOTES no\-commit=1]\*(C'\fR section of \fIetc/log_transaction\fR:
.Sp
.Vb 6
\&    pptransactionid: [calc]$Session\->{payment_result}{TRANSACTIONID}[/calc]
\&    pppaymenttype: [calc]$Session\->{payment_result}{PAYMENTTYPE}[/calc]
\&    pppendingreason: [calc]$Session\->{payment_result}{PENDINGREASON}[/calc]
\&    ppcorrelationid: [calc]$Session\->{payment_result}{CORRELATIONID}[/calc]
\&    pppayerstatus: [value pppayer_status]
\&    ppaddressstatus: [value ppaddress_status]
.Ve
.Sp
and add these 6 new columns into your transactions table as type
varchar(256). The CorrelationID is the one you need in any dispute with
them. The payerstatus and addressstatus results may be useful in the
order fulfillment process.
.Sp
Add to \fIetc/profiles.order\fR, something like:
.Sp
.Vb 1
\&    _\|_NAME_\|_                            paypal
\&
\&    _\|_COMMON_ORDER_PROFILE_\|_
\&    email=required
\&    email=email
\&    &fatal = yes
\&    &setcheck = end_profile 1
\&
\&    &set = mv_payment Incomplete
\&
\&    [if variable MV_PAYMENT_MODE]
\&    [value name=mv_payment_realtime set=""]
\&    &set=mv_payment PayPal ([var MV_PAYMENT_MODE])
\&    &set=mv_payment_realtime 1
\&    [else]
\&    &set=mv_payment PayPal
\&    [/else]
\&    [/if]
\&
\&    &final = yes
\&    &setcheck = end_profile 1
\&    &setcheck = payment_method paypal
\&
\&    _\|_END_\|_
.Ve
.IP "cancelurl" 4
.IX Item "cancelurl"
\&\fBRequired.\fR \s-1URL\s0 to go to if the buyer cancels. Usually set to your checkout page:
.Sp
.Vb 1
\&    _\|_SECURE_SERVER_\|_\|_\|_CGI_URL_\|_/_\|_CHECKOUT_PAGE_\|_
.Ve
.IP "headerimg" 4
.IX Item "headerimg"
\&\s-1URL\s0 to your custom image to show the buyer during their PayPal.com session.
.IP "reqconfirmshipping" 4
.IX Item "reqconfirmshipping"
This specifies that a Paypal customer must have his address 'confirmed'
.IP "addressoverride" 4
.IX Item "addressoverride"
This specifies that you will ship only to the address \s-1IC\s0 has on file
(including the name and email); your customer needs to login to \s-1IC\s0 first
before going to Paypal
.IP "use_billing_override" 4
.IX Item "use_billing_override"
Sends billing address instead of shipping to PayPal (use with
addressoverride)
.PP
\&\fBEnd PayPal\fR
.PP
The following should rarely be used, as the supplied defaults are
usually correct.
.IP "remap" 4
.IX Item "remap"
This remaps the form variable names to the ones needed by PayPal. See
the \f(CW\*(C`Payment Settings\*(C'\fR heading in the Interchange documentation for use.
.IP "host" 4
.IX Item "host"
The payment gateway host to use, to override the default.
.SS "Troubleshooting"
.IX Subsection "Troubleshooting"
Try the instructions above, then enable test mode. A test order should
complete.
.PP
Then move to live mode and try a sale with the card number \f(CW\*(C`4111 1111
1111 1111\*(C'\fR and a valid future expiration date. The sale should be denied,
and the reason should be in [data session payment_error].
.PP
If it doesn't work:
.IP "\(bu" 4
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.Sp
.Vb 1
\&    Require module Vend::Payment::PayflowPro
.Ve
.IP "\(bu" 4
Check the error logs, both catalog and global.
.IP "\(bu" 4
Make sure you set your account \s-1ID\s0 and secret properly.
.IP "\(bu" 4
Try an order, then put this code in a page:
.Sp
.Vb 8
\&    <pre>
\&    [calcn]
\&        my $string = $Tag\->uneval( { ref => $Session\->{payment_result} });
\&        $string =~ s/{/{\en/;
\&        $string =~ s/,/,\en/g;
\&        return $string;
\&    [/calcn]
\&    </pre>
.Ve
.Sp
That should show what happened.
.IP "\(bu" 4
If all else fails, consultants are available to help with
integration for a fee. You can find consultants by asking on the
\&\f(CW\*(C`interchange\-biz@icdevgroup.org\*(C'\fR mailing list.
.SH "NOTE"
.IX Header "NOTE"
See this \s-1URL\s0 for Payflow Pro documentation:
    https://developer.paypal.com/webapps/developer/docs/classic/payflow/gs_payflow/
.PP
See this \s-1URL\s0 for PayPal Express Checkout documentation:
    https://developer.paypal.com/webapps/developer/docs/classic/express\-checkout/gs_expresscheckout/
.PP
There is actually nothing in the package Vend::Payment::PayflowPro.
It changes packages to Vend::Payment and places things there.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 8
\&    Josh Lavin <josh@perusion.com>
\&    Tom Tucker <tom@ttucker.com>
\&    Mark Johnson <mark@endpoint.com>
\&    Jordan Adler
\&    David Christensen <david@endpoint.com>
\&    Cameron Prince <cameronbprince@yahoo.com>
\&    Mike Heins <mike@perusion.com>
\&    Jon Jensen <jon@endpoint.com>
.Ve
