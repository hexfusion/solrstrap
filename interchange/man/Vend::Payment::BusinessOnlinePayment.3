.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::BusinessOnlinePayment 3"
.TH Vend::Payment::BusinessOnlinePayment 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::BusinessOnlinePayment \- Interchange wrapper for Business::OnlinePayment
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=onlinepayment
\&
\&        or
\&
\&    [charge mode=onlinepayment param1=value1 param2=value2]
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 2
\&  Business::OnlinePayment
\&  Business::OnlinePayment:: gateway module
\&
\&  See L<http://www.420.am/business\-onlinepayment/> or 
\&  L<http://search.cpan.org/search?query=Business%3A%3AOnlinePayment&mode=module>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper around Business::OnlinePayment for Interchange.
.PP
The Vend::Payment::BusinessOnlinePayment module implements the \fIonlinepayment()\fR
routine for use with Interchange.  It is compatible on a call level with the
other Interchange payment modules.  In theory (and even usually in practice)
you could switch from another gateway to a Business::OnlinePayment supported
gateway (or between different Business::OnlinePayment gateways) with a few
configuration file changes.
.PP
Business::OnlinePayment is a set of related Perl modules for processing online
payments (credit cards, electronic checks, and other payment systems).  It
provides a consistant interface for processing online payments, regardless of
the gateway backend being used, in the same way that \s-1DBI\s0 provides an consistant
interface to different databases.
.PP
See <http://www.420.am/business\-onlinepayment/> for more information and
supported gateways.
.PP
It is hoped that a future version of Interchange will do all credit card
processing through Business::OnlinePayment, but this is my no means
guaranteed and the timeframe is unknown.  Think \s-1ALSA\s0 somewhere around
Linux 2.2 and you've got the general idea.
.PP
Currently this module is recommended for people with gateway processors
unsupported by a native Interchange Vend::Payment:: module and for the
adventurous.
.SH "USAGE"
.IX Header "USAGE"
To enable this module, place this directive in \f(CW\*(C`interchange.cfg\*(C'\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::BusinessOnlinePayment
.Ve
.PP
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`onlinepayment\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \f(CW\*(C`catalog.cfg\*(C'\fR:
.PP
.Vb 1
\&    Variable   MV_PAYMENT_MODE  onlinepayment
.Ve
.PP
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable, For example, the \f(CW\*(C`setting\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=onlinepayment setting=value]
.Ve
.PP
or
.PP
.Vb 1
\&    Route onlinepayment setting value
.Ve
.PP
or
.PP
.Vb 1
\&    Variable MV_PAYMENT_SETTING      value
.Ve
.PP
The following settings are available:
.IP "processor" 4
.IX Item "processor"
Your Business::OnlinePayment processor.
.IP "id" 4
.IX Item "id"
Your Business::OnlinePayment login.
.IP "secret" 4
.IX Item "secret"
Your Business::OnlinePayment password.
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 8
\&    Interchange         Business::OnlinePayment
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        auth            Authorization Only
\&        return          Credit
\&        reverse
\&        sale            Normal Authorization
\&        settle          Post Authorization
\&        void            Void
.Ve
.IP "test" 4
.IX Item "test"
Set this true if you wish to operate in test mode.  Make sure to verify
that your specific Business::OnlinePayment:: gateway module supports a
test mode.
.PP
In addition, any other processor options are passed to your gateway.  See
the documentation for your specific Business::OnlinePayment:: gateway module
for details on what options are required, if any.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Kohler <ivan\-interchange@420.am>
.PP
Initial development of this module was sponsored in part by Simply Marketing,
Inc. <http://www.simplymarketinginc.com/>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2004 Ivan Kohler.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "Extra query parameters"
.IX Header "Extra query parameters"
.ie n .IP "extra_query_params ""customer_id  their_param=our_param""" 4
.el .IP "extra_query_params ``customer_id  their_param=our_param''" 4
.IX Item "extra_query_params customer_id their_param=our_param"
This allows you to map a passed parameter to the transaction query
of your module. Obviously the module must support it.
.Sp
The parameter comes from the parameters passed to the [charge ..] tag
or the route.
.Sp
The above id passes the customer_id parameter on with a key of the
same name, while the second sets their param \f(CW\*(C`their_param\*(C'\fR with 
\&\f(CW\*(C`our_param\*(C'\fR.
.SH "Extra result parameters"
.IX Header "Extra result parameters"
.ie n .IP "extra_result_params ""transid=weird.module.name""" 4
.el .IP "extra_result_params ``transid=weird.module.name''" 4
.IX Item "extra_result_params transid=weird.module.name"
This allows you to map a returned parameter to the payment result 
hash of Interchange.
