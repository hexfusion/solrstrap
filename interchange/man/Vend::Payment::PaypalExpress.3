.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::PaypalExpress 3"
.TH Vend::Payment::PaypalExpress 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::PaypalExpress \- Interchange Paypal Express Payments Module
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 7
\&    SOAP::Lite
\&    XML::Parser
\&    MIME::Base64
\&    URI
\&    libwww\-perl
\&    Crypt::SSLeay
\&    IO::Socket::SSL   (version 0.97 until 0.99x is fixed for the "illegal seek" error, or a later one that works)
\&
\&        Date::Calc \- new for v1.1.0
.Ve
.PP
Test for current installations with: perl \-MSOAP::Lite \-e 'print \*(L"It works\en\*(R"'
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::PaypalExpress module implements the \fIpaypalexpress()\fR routine
for use with Interchange.
.PP
#=========================
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Quick start:
.PP
Place this module in <ic_root>/lib/Vend/Payment, and call it in <ic_root>/interchange.cfg with
Require module Vend::Payment::PaypalExpress. Ensure that your perl installation contains the modules
listed above and their pre-requisites.
.PP
Logon to your Paypal Business (not Personal) account and go to 'Profile' \-> '\s-1API\s0 access' \->
\&'Request \s-1API\s0 Credentials' \-> 'Signature'. This will generate a user id, password and signature.
.PP
Add to catalog.cfg all marked 'required', optionally the others:
Route  paypalexpress id   xxx  (required_
Route  paypalexpress password xxx  (required)
Optionally for this updated version, you may prefix the three credentials above some unique
identifier, eg 'gbp', 'usd', 'sandbox' and the module will switch between them on the fly.
Useful if you have different Paypal a/cs in different currencies and want to choose the
a/c used based on the currency chosen by the customer.
Route  paypalexpress signature xxx (required: use the 3\-token system, not the certificate system at Paypal)
Route  paypalexpress returnurl your_full_URL/paypalgetrequest (required)
Route  paypalexpress cancelurl your_full_URL/your_cancellation_page (required)
Route  paypalexpress host api\-3t.sandbox.paypal.com  (for testing)
Route  paypalexpress host api\-3t.paypal.com (required: live host, one of this or the above but not both)
Route  paypalexpress currency EUR|GBP|USD|CAD|AUD  (optional, defaults to \s-1USD\s0)
Route  paypalexpress pagestyle (optional, set up at Paypal)
Route  paypalexpress paymentaction Sale (optional, defaults to 'Sale')
Route  paypalexpress headerimg 'secure \s-1URL\s0' (optional, though must be served from a secure \s-1URL\s0 if used)
.PP
Optionally, you may set the return \s-1URL\s0 in the page as
<input type=hidden name=returnurl value=your_url>,
and similarly the cancelurl may be set in the page.
.PP
To have Paypal co-operate with your normal payment service provider, eg Authorizenet, do the following:
.PP
Leave the \s-1MV_PAYMENT_MODE\s0 variable in catalog.cfg and products/variable.txt set to your normal payment processor.
.PP
Add to etc/profiles.order:
_\|_NAME_\|_                       paypalexpress
_\|_COMMON_ORDER_PROFILE_\|_
&fatal = yes
email=required
email=email
&set=mv_payment PaypalExpress
&set=psp Paypal
&set=mv_payment_route paypalexpress
&final = yes
&setcheck = payment_method paypalexpress
_\|_END_\|_
or, if you want to use Paypal as a 'Buy now' button without taking any customer details, then omit the
_\|_COMMON_ORDER_PROFILE_\|_ and the two 'email=...' lines above.
.PP
Within the 'credit_card' section of etc/profiles.order leave \*(L"\s-1MV_PAYMENT_MODE\*(R"\s0 as set,
and add
&set=psp _\|_MV_PAYMENT_PSP_\|_
&set=mv_payment_route authorizenet
(or your preferred gateway instead of authorizenet) as the last entries in the section.
\&\s-1NB:\s0 if you are taking offline payments then do not set mv_payment_route here, but instead set in the body
of the 'Buy now' button \*(L"mv_payment_route=offlinepayment
                         mv_order_profile=credit_card\*(R" 
and install the OfflinePayment.pm module so as to have a named alternative payment route in catalog.cfg.
.PP
and then add
Variable \s-1MV_PAYMENT_PSP \s0\*(L"foo\*(R"
to catalog.cfg, where \*(L"foo\*(R" is the name of your gateway or acquirer, formatted as you want it to appear
on the receipt. Eg, \*(L"Bank of America\*(R" (rather than boa), \*(L"AuthorizeNet\*(R" (rather than authorizenet).
.PP
In etc/log_transction, immediately after the 
[elsif variable \s-1MV_PAYMENT_MODE\s0]
	[calc]
insert this line: 
	undef \f(CW$Session\fR\->{payment_result}{MStatus};
.PP
and leave
[elsif variable \s-1MV_PAYMENT_MODE\s0] 
as set (contrary to previous revisions of this document) but within the same section change the following 
two instances of [var \s-1MV_PAYMENT_MODE\s0] to [value mv_payment_route]. In particular, the setting inside the
[charge route=\*(L"..] line will specify which payment processor is used for each particular case, and you
need to further modify this line so that it ends up like this:
	[tmp name=\*(R"charge_succeed\*(L"][charge route=\*(R"[value mv_payment_route]\*(L" pprequest=\*(R"dorequest\*(L" amount=\*(R"[scratch tmp_remaining]\*(L" order_id=\*(R"[value mv_transaction_id]"][/tmp]
If the value of 'mv_payment_route' is set to 'paypalexpress', then this is the one that is run. It is only
called via log_transaction after the customer has returned from Paypal and clicks the 'final' pay button, 
hence this is where the final 'pprequest=dorequest' value is sent.
.PP
Add into the end of the \*(L"[import table=transactions type=LINE continue=NOTES no\-commit=1]\*(R" section
of etc/log_transaction:
.PP
psp: [value psp]
pptransactionid: [calc]$Session\->{payment_result}{TransactionID}[/calc]
pprefundtransactionid: [calc]$Session\->{payment_result}{RefundTransactionID}[/calc]
ppcorrelationid: [calc]$Session\->{payment_result}{CorrelationID};[/calc]
pppayerstatus: [value payerstatus]
ppaddressstatus: [value address_status]
.PP
and add these 6 new columns into your transactions table as type varchar(256).
You will have records of which transactions went through which payment service providers, as well
as Paypal's returned IDs. The CorrelationID is the one you need in any dispute with them. The payerstatus
and addressstatus results may be useful in the order fulfillment process.
.PP
Add these lines into the body of the 'submit' button that sends the customer to Paypal.
          [run\-profile name=paypalexpress]
          [if type=explicit compare=\*(L"[error all=1 show_var=1 keep=1]\*(R"]
          mv_nextpage=ord/checkout
          [/if]
          [charge route=\*(L"paypalexpress\*(R" pprequest=\*(L"setrequest\*(R"]
          mv_todo=return
.PP
Create a page 'ord/paypalgetrequest.html', and make it the target of the returnURL from Paypal:
[charge route=\*(L"paypalexpress\*(R" pprequest=\*(L"getrequest\*(R"]
[bounce href=\*(L"[area ord/paypalcheckout]\*(R"]
.PP
Create a page 'paypalcheckout.html' in the pages/ord folder. This should display just the basket and address
or whatever you choose for the final pages, plus an \s-1IC\s0 button with:
			  mv_order_profile=paypalexpress
			  mv_todo=submit
in the body part as the submit button to finalise the order. 'dorequest' is set in log_transaction.
.PP
You may then use PaypalExpress for any transaction where the 'mv_order_profile' is set to paypalexpress
but still use the \*(L"credit_card\*(R" 'mv_order_profile' for other transactions, eg for Authorizenet. Of
course, if PaypalExpress is to be your only payment method, then simply add:
Variable  \s-1MV_PAYMENT_MODE\s0 paypalexpress
to catalog.cfg just before the paypalexpress Route entries, and this route will be the default.
.PP
Note that because Paypal do not recognise \s-1UK\s0 as a country, only \s-1GB,\s0 you need to set up shipping in
your country.txt for \s-1GB\s0 as well as \s-1UK.\s0 Note also that Paypal do not return the customer's telephone
number by default, so you may need to adjust your order profiles to compensate.
.PP
Also note that Paypal requires the user to have cookies enabled, and if they're not will return an error page with no 
indication of the real problem. You may want to warn users of this.
.PP
The flow is: the first button for Paypal sends a request to Paypal to initialise the transaction and gets a token 
back in return. If Paypal fails to send back a token, then the module refreshes that page with an error message 
suggesting that the customer should use your normal payment service provider and shows the cards that you accept. 
Once the token is read, then your customer is taken to Paypal to login and choose his payment method. Once that is 
done, he returns to us and hits the 'paypalgetrequest' page. This gets his full address as held by Paypal, bounces to
the final 'paypalcheckout' page and populates the form with his address details. If you have both shipping
and billing forms on that page, the shipping address will be populated by default but you may force
the billing form to be populated instead by sending
<input type=hidden name=pp_use_billing_address value=1>
at the initial stage. Then the customer clicks the final 'pay now' button and the transaction is done.
.PP
Options that may be set either in the route or in the page:
 * reqconfirmshipping \- this specifies that a Paypal customer must have his address 'confirmed'
 * addressoverride \- this specifies that you will ship only to the address \s-1IC\s0 has on file (including
   the name and email); your customer needs to login to \s-1IC\s0 first before going to Paypal
 * use_billing_override \- sends billing address instead of shipping to PayPal (use with addressoverride)
 * other options are also settable.
.PP
Testing: while the obvious test choice is to use their sandbox, I've always found it a bit of a dog's breakfast
   and never trusted it. Much better to test on the live site, and just recyle money between your personal and
   business accounts at minimal cost to yourself, but with the confidence of knowing that test results are correct.
.PP
Recurring Payments:
you need a number of new fields in the products table for the parameters required by
Paypal, viz:
rpdeposit: gross amount for a deposit
rpdepositfailedaction: ContineOnFailure \- Paypal will added failed amount to outstanding balance
  CancelOnFailure (or empty) \- Paypal sets status to Pending till inital payment completes, then 
  sends \s-1IPN\s0 to notify of either the status becoming Active or the payment failing
rptrialamount: nett amount
rptrialtaxamount:
rptrialshippingamount:
rptrialperiod: one of Day, Week, SemiMonth, Month.
rptrialfrequency: integer, number of periods between payments, eg \*(L"every 2 weeks\*(R"
rptrialtotalcycles: total number of trial payments before regular payments start
rpamount: nett amount for regular payments
rptaxamount:
rpshippingamount:
rpperiod: one of Day, Week, SemiMonth, Month
rpfrequency: integer, number of periods between payments, eg \*(L"every 2 weeks\*(R"
  \s-1NB:/\s0 multiple of period * frequency cannot be greater than one year as maximum interval between payments
rptotalcycles: total number of regular payments \- can be empty
rpstartdate: leave empty to use current date. An absolute date must be in the 2011\-02\-25T00:00:00Z
  format. An interval from the current date should use \*(L"2 weeks\*(R", \*(L"5 days\*(R" as the format, where
  the period can be any given above except SemiMonth (this is always billed on the 1st and
  15th of the month)
rpmaxfailedpayments: number of failures before the agreement is automatically cancelled
rpautobillarrears: NoAutoBill, AddToNextBilling \- Paypal automatically takes requested action
.PP
Displaying the recurring payment amounts taken at order time is quite straightforward \- if you want
to do that then put the total to be taken into the price field, nett of tax or shipping.
You could then modify the receipt page and receipt emails with a new field something like:
[if\-item\-field rpperiod] 
[tmp][item\-calc]$rpno++[/item\-calc][/tmp]
Ref: [value mv_order_number]\-sub[item\-calc]$rpno[/item\-calc]
<br>\s-1ID:\s0 [data table=transactions col=order_id key='[value mv_order_number]\-sub[item\-calc]$rpno[/item\-calc]']
<br>Status: [data table=transactions col=status key='[value mv_order_number]\-sub[item\-calc]$rpno[/item\-calc]'] 
[/if\-item\-field]
Where:
\&\s-1ID\s0 = rpprofileid (the primary identifier on the customer's Paypal account page),
Ref = rpprofilereference (your order number, appended with '\-subn' where n is a number from 1 to 10),
Status = rpprofilestatus (Pending or Active, but Cancelled and Suspended are also valid)
.PP
If you want to log the key values for each recurring profile, then add these fields to the orderline table:
rpperiod varchar(32)
rpfrequency varchar(32)
rpprofileid  varchar(64)
rpprofilereference varchar(64)
rpprofilestatus varchar(32)
rpgrossamount varchar(32)
rpcorrelationid varchar(64)
.PP
and at the beginning of the orderline section of log_transaction, around line 462, add
[calc] \f(CW$rpno\fR = 0; [/calc]
just before \*(L"[item\-list] Added [item\-code] to orderline:\*(R"
and then between \*(L"[item\-list]\*(R" and \*(L"[import table=orderline ...]\*(R" add:
.PP
[if\-item\-field rpperiod]
[item\-calc]$rpno++[/item\-calc]
[seti rpprofileid][data table=transactions col=order_id key='[value mv_order_number]\-sub[item\-calc]$rpno[/item\-calc]'][/seti]
[charge route=\*(L"[value mv_payment_route]\*(R" pprequest=\*(L"getrpdetails\*(R" rpprofileid=\*(L"[scratchd rpprofileid]\*(R"]
[/if\-item\-field]
.PP
and then between [import ..] and [/import]
add:
rpprofileid: [scratchd rpprofileid]
rpprofilereference: [scratchd rpprofilereference]
rpprofilestatus: [scratchd rpprofilestatus]
rpgrossamount: [scratchd rpgrossamount]
rpperiod: [scratchd rpperiod]
rpfrequency: [scratchd rpfrequency]
rpcorrelationid: [scratchd rpcorrelationid]
.PP
Calling 'getrpdetails' as above returns everything Paypal holds about that transaction and makes it available
in scratch space:
rpcorrelationid
rpprofilereference
rpprofileid
rpdescription
rpprofilestatus
rpsubscribername
rpstartdate (formatted for [convert\-date])
rptaxamount
rpshippingamount
rpamount
rpgrossamount (including tax and shipping, amount for each regular payment)
rpfrequency
rpperiod
rptotalycles (total committed to)
rpnextbillingdate (formatted for [convert\-date])
rpcyclesmade (number of payments made)
rpcyclesfailed (number of payaments failed)
rpcyclesremaining (number of payments left to go)
rparrears (amount oustanding)
rpmaxfailedpayments (number of failed payments allowed by merchant)
rptrialamount
rptrialtaxamount
rptrialshippingamount
rptrialfrequency 
rptrialperiod
rptrialtotalcycles
rptrialgrossamount 
rpfinalpaymentduedate
rpregularamountpaid (amount paid to date)
rptrialamountpaid
.PP
ItemDetails now passed and displayed in the 'new style' Paypal checkout. Discounts/coupons 
are not passed, as there is too much scope for error with currency conversions etc which 
would cause Paypal to reject the transaction, but instead a note to the buyer will be displayed if 
the value of pp_discount_note is passed as true.
.PP
The order number is now set prior to going to Paypal, as they need a Profile Reference
and the most sensible way to handle this is to set the order number and append a unique 
reference for each recurring agreement set up. This also means that the customer's Paypal
account page will show the \s-1IC\s0 order number as well as Paypal's ProfileID for simpler correlation.
.PP
You may setup a recurring billing agreement and profile with or without an accompanying
purchase or possibly without any initial payment \- if without then the amount sent is zero. 
# ### \s-1FIXME \s0
To allow Interchange to log a zero amount,
change log_transaction to: 
[unless scratch allowzeroamount]
  [if scratch tmp_remaining == 0]
	Fully paid by payment cert.
  [/if] 
[/unless]
around line 80, and around line 221
[if scratchd ordernumberalreadyset]
  Order number already set by PaypalExpress
[else]
Set order number in values: [value
\&.....
						\f(CW$Session\fR\->{mv_order_number} = \f(CW$Values\fR\->{mv_order_number};
					[/calc]
[/else]
[/if]
to stop \s-1IC\s0 setting the order number again
.PP
There are also a number of functions which could be handled by an admin panel or virtual
terminal.
.PP
Manage Recurring Payments:
this will cancel, suspend or reactive a profile. It expects to find the customer's
ProfileID in the orderline table as rpprofileid, and will return a new correlationid.
Send managerp_cancel, managerp_suspend, or managerp_reactivate from your virtual
terminal as a 'pprequest' along with the customer's profileID as an \s-1IC \s0'value'.
.PP
Modify Recurring Payments;
this allows you to add cycles to the payment profile, change addresses, change amount
to be paid. You cannot increase the amount by more than 20% pa.
.PP
Masspay:
this works for a list of up to 250 recipients, but this function is apparently being phased
out \- certainly in the \s-1UK\s0 they will not enable masspay any more. Note that the currency 
sent must be the same as the currency the sending account is in, and you only get one
\&\s-1ID\s0 returned for the entire masspayment. The module expects a list as [value vtmessage], 
consisting of four comma-separated and quoted fields per record, one record per line:
\&\*(L"email address (or paypal \s-1ID\s0)\*(R",\*(L"amount (without currency symbols)\*(R",\*(L"unique \s-1ID\*(R",\s0\*(L"notes\*(R"
The notes field may be empty but must be quoted. You may also send a subject for the email 
that Paypal sends to each recipient, as [value email_subject], defaulting to 'Paypal payment' 
if not set. All recipients must be either email addresses or paypal IDs, not a mixture of both. 
All payments must be in the same currency for each list sent, and the currency set is the same 
as taken by the main routines; see above.
.PP
Other functions added, as Route parameters or \s-1IC\s0 or \s-1HTML\s0 values
allowed_payment_method: Default = any; AnyFundingSource = any chosen by buyer irrespective of profile;
	  InstantOnly = only instant payments; InstantFundingSource  = only instant methods, blocks 
	  echeck, meft, elevecheck
soft_descriptor: shown on customer's card receipt as transaction description
brand_name: overrides business name shown to customer
gift_message_enable: 0 or 1
gift_receipt_enable: 0 or 1
gift_receipt_enable: 0 or 1
gift_wrap_name: string
buyer_email_optin: 0 or 1
survey_enable: 0 or 1
allow_push_funding: 0 or 1
allow_note: 0 or 1
service_phone: displayed to customer at PaypalExpress
notify_url: for \s-1IPN\s0 callbacks
.SH "Bugs Including total_type causes all child elements of the initial Set request to be ignored, thereby removing recurring payment BillingAgreeements and all payment detail items from view, which in turn means there is no order total and so the request is rejected."
.IX Header "Bugs Including total_type causes all child elements of the initial Set request to be ignored, thereby removing recurring payment BillingAgreeements and all payment detail items from view, which in turn means there is no order total and so the request is rejected."
Including brand_name does the same as above but only when a BillingAgreeement is included in the
request \- hence the module excludes this setting when a BillingAgreeement is included, but sets
it otherwise.
.SH "Changelog version 1.1.0 October 2011 \- major update: \- enabled 'item details' in initial request, so the new-style Paypal checkout page shows an itemised basket \- updated masspay to handle multiple recipients properly \- added refunds, either full or partial \- added 'getbalance', to get the balance of the calling account or any other account for which the credentials are known. If account is multi-currency, then all balances and currencies are displayed in a scratch value. \- added 'sendcredit', which sends funds to a specified credit card. You need to know the full billing address and cv2 number, and need to get Paypal to enable this function on your account \- added repeat payments, ie recurring billing. Up to the Paypal limit of 10 billing agreements may be set up in one request. Billing agreements may be set up with optional trial periods and deposits, and may be setup with or without an accompanying standard purchase. \- added function to manage repeat payments, ie suspend, reactivate, or cancel \- added function to modify repeat payments, ie to alter the billing/shipping address or name, to alter the amount or period etc \- added function to get details of a repeat payments billing agreement, and display the results in scratch space including date of next payment, amount paid to date, etc \- added function to bill any outstanding arrears in a billing agreement \- requires Date::Calc now"
.IX Header "Changelog version 1.1.0 October 2011 - major update: - enabled 'item details' in initial request, so the new-style Paypal checkout page shows an itemised basket - updated masspay to handle multiple recipients properly - added refunds, either full or partial - added 'getbalance', to get the balance of the calling account or any other account for which the credentials are known. If account is multi-currency, then all balances and currencies are displayed in a scratch value. - added 'sendcredit', which sends funds to a specified credit card. You need to know the full billing address and cv2 number, and need to get Paypal to enable this function on your account - added repeat payments, ie recurring billing. Up to the Paypal limit of 10 billing agreements may be set up in one request. Billing agreements may be set up with optional trial periods and deposits, and may be setup with or without an accompanying standard purchase. - added function to manage repeat payments, ie suspend, reactivate, or cancel - added function to modify repeat payments, ie to alter the billing/shipping address or name, to alter the amount or period etc - added function to get details of a repeat payments billing agreement, and display the results in scratch space including date of next payment, amount paid to date, etc - added function to bill any outstanding arrears in a billing agreement - requires Date::Calc now"
version 1.0.8 July 2010
	\- fixed bug in handling of multiple \s-1PP\s0 error messages
.PP
version 1.0.7 December 2009
	\- another variation in Canadian Province names has just come to light, whereby they sometimes send
	  the 2 letter code with periods, eg B.C. as well as \s-1BC.\s0 Thanks to Steve Graham for finding this
	\- patch to allow use of the [assign] tag in shipping
	\- patch to allow 'use_billing_override' to send billing addresses
	\- patch to display Long rather than Short \s-1PP\s0 error message to customers
	  Thanks to Josh Lavin for these last three
.PP
version 1.0.6 September 2009
	\- added 'use strict' and fixed odd errors (and removed giropay vestiges that belong in next version)
	\- made itemdetails loop through basket properly
	\- added Fraud Management Filters return messages to optional charge parameters
version 1.0.5, June 2009
	\- fixed bug with Canadian provinces: \s-1PP\s0 were sending shortened versions of 2 province names, and also 
	  sometimes sending the 2 letter code (possibly from older a/cs) rather than the full name. Thanks to 
	  Steve Graham for finding this.
version 1.0.4, May 2009
	\- re-wrote documentation, including revised and simplified method of co-operating with other payment
	  systems in log_transaction.
.PP
version 1.0.3, 1.02.2009
	\- fixed bug in handling of thousands separator
.PP
version 1.0.2, 22.01.2009 
	\- conversion of Canadian province names to 2 letter variant is now the default
	\- fixed bug with conversion of Canadian province names to 2 letter variant
	\- changed method of reading value of pprequest
	\- added failsafe logging to orders/paypal/ in case of order route failure
	\- fixed bug whereby \s-1PP\s0 returns billing name in a shipping address
	\- added note to docs re \s-1PP\s0 requiring cookie
	\- altered internal redirection code to better handle absence of cookies (thanks to Peter Ajamian for heads-up)
	\- altered docs to reflect the new sandbox (thanks to Josh Lavin for the heads-up on that)
	\- \s-1TODO:\s0 as the new \s-1API\s0 now includes a \s-1SOAP\s0 integration of recurring/subscription billing, need 
	        to convert existing name=value pair \s-1IPN\s0 module and integrate into this module. Will add
	        masspay, refund and other functions at the same time.
.PP
version 1.0.1, 24.05.2008 
	\- added error message to \s-1IC\s0 session for when Paypal returns error message instead of token.
	\- added option to convert Canadian state/province names to an uppercased 2 letter variant, so
            as to agree with Interchange's de facto requirement for this.
=back
.SH "AUTHORS"
.IX Header "AUTHORS"
Lyn St George <info@zolotek.net>
