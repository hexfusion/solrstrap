.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::MCVE 3"
.TH Vend::Payment::MCVE 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::MCVE \- Interchange MCVE support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=mcve
\&
\&        or
\&
\&    [charge mode=mcve param1=value1 param2=value2]
\&
\&        or
\&
\&    mcve($mode, $opt);
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 1
\&    MCVE.pm
.Ve
.PP
The \s-1MCVE\s0 libraries are available free at http://www.mcve.com/
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1MCVE,\s0 Mainstreet Credit Verification Engine is a high performance
software application designed to provide quality, in-house, Credit Card
processing \s-1FROM\s0 Linux, FreeBSD, OpenBSD, \s-1IBM AIX,\s0 Sun Solaris, \s-1SCO\s0
OpenServer/UnixWare, and Mac \s-1OS X\s0 platforms to established clearing
houses.  The \s-1MCVE C &\s0 Perl library software can be downloaded free of charge
from http://mcve.com.  This module was developed and tested with the server 
software installed on HotConnect.net (http://www.hotconnect.net). 
Hot Connect, Inc. is an Interchange friendly Web Hosting, E\-Commerce, and
Internet Services company.
.PP
The Vend::Payment::MCVE module implements the \fImcve()\fR routine
for use with Interchange. It is compatible on a call level with the other
Interchange payment modules.
.PP
To enable this module, place this directive in \f(CW\*(C`interchange.cfg\*(C'\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::MCVE
.Ve
.PP
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
Make sure CreditCardAuto is off (default in Interchange demos).
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`mcve\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \f(CW\*(C`catalog.cfg\*(C'\fR:
.PP
.Vb 1
\&    Variable   MV_PAYMENT_MODE  mcve
.Ve
.PP
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable, For example, the \f(CW\*(C`id\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=mcve name=mcve_configname]
.Ve
.PP
or
.PP
.Vb 1
\&    Route mcve name mcve_configname
.Ve
.PP
or
.PP
.Vb 1
\&    Variable MV_PAYMENT_NAME      mcve_configname
.Ve
.PP
The active settings are:
.PP
.Vb 11
\&    Variable   MV_PAYMENT_MODE mcve
\&    Variable   MV_PAYMENT_NAME mcve_username
\&    Variable   MV_PAYMENT_PASSWD mcve_password
\&    Variable   MV_PAYMENT_HOST sv1.carlc.com
\&    Variable   MV_PAYMENT_PORT 8333
\&    Variable   MV_PAYMENT_COUNTER etc/mcve_id.counter
\&    Variable   MV_PAYMENT_COUNTER_START 100
\&    Variable   MV_PAYMENT_SALE_ON_AUTH 1
\&    Variable   MV_PAYMENT_NO_SALE_BAD_AVS 0
\&    Variable   MV_PAYMENT_NO_SALE_BAD_CVV2 0
\&    Variable   MV_PAYMENT_SUCCESS_ON_ANY 0
.Ve
.IP "name" 4
.IX Item "name"
Your \s-1MCVE\s0 configuration username, set up when \s-1MCVE\s0 was configured/installed on
the machine. Global parameter is \s-1MV_PAYMENT_NAME.\s0
.IP "no_sale_bad_avs" 4
.IX Item "no_sale_bad_avs"
Normally Interchange charge modules do an authorization, and if successful, do a sale.
This module is configurable for a different models, where transactions are not
automatically saled.
.IP "sale_on_auth" 4
.IX Item "sale_on_auth"
The storekeeper may not wish to sale a transaction if the \s-1AVS\s0 is bad.
.IP "success_on_any" 4
.IX Item "success_on_any"
Alternatively the storekeeper may wish to cause any transaction to appear to be a
successful sale.  The storekeeper would have to contact buyers with bad credit card
information and manually redo the sale.  The motivation is to make sure no one
attempts a sale and gives up for any reason.   This mode of operation, set with
\&\s-1MV_PAYMENT_SUCCESS_ON_ANY\s0 is not commonly used.
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 4
\&    Interchange mode    MCVE mode
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    auth                auth
\&    sale                sale
.Ve
.Sp
Not supported yet:
.Sp
.Vb 3
\&    return              return
\&    reverse             reverse
\&    void                void
.Ve
.IP "counter, counter_start" 4
.IX Item "counter, counter_start"
Currently this is not being used, and Interchange is generating id's.
.Sp
.Vb 2
\&    Route   mcve  counter        etc/mcve_id.counter
\&    Route   mcve  counter_start  100
.Ve
.SS "Troubleshooting"
.IX Subsection "Troubleshooting"
Try the instructions above, with a test credit card number from your payment processor.
.PP
Then try a sale with the card number \f(CW\*(C`4111 1111 1111 1111\*(C'\fR
and a valid expiration date. The sale should be denied, and the reason should
be in [data session payment_error].
.PP
If nothing works:
.PP
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.PP
.Vb 1
\&    Require module Vend::Payment::MCVE
.Ve
.PP
Make sure \s-1MCVE\s0 is installed and working.
.PP
Check the error logs, both catalog and global.
.PP
Make sure you set your payment parameters properly.
.PP
Try an order, then put this code in a page:
.PP
.Vb 3
\&    [calc]
\&        $Tag\->uneval( { ref => $Session\->{payment_result} );
\&    [/calc]
.Ve
.PP
That should show what happened.
.SH "BUGS"
.IX Header "BUGS"
There is actually nothing *in* Vend::Payment::MCVE. It changes packages
to Vend::Payment and places things there.
.SH "AUTHORS"
.IX Header "AUTHORS"
\&\s-1MCVE\s0 modifications by tom@readyink.com for Carlc Internet Services
.SH "CREDITS"
.IX Header "CREDITS"
Derived from \s-1CCVS\s0.pm template, and others.
