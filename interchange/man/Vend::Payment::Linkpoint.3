.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::Linkpoint 3"
.TH Vend::Payment::Linkpoint 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::Linkpoint \- Interchange Linkpoint Support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=linkpoint
\& 
\&        or
\& 
\&    [charge mode=linkpoint param1=value1 param2=value2]
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 1
\&    LPERL
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::Linkpoint module implements the \fIlinkpoint()\fR routine
for use with Interchange. It is compatible on a call level with the other
Interchange payment modules.
.PP
To enable this module, place this directive in \f(CW\*(C`interchange.cfg\*(C'\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::Linkpoint
.Ve
.PP
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
Make sure CreditCardAuto is off (default in Interchange demos).
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`linkpoint\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \f(CW\*(C`catalog.cfg\*(C'\fR:
.PP
.Vb 1
\&    Variable MV_PAYMENT_MODE linkpoint
.Ve
.PP
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable, For example, the \f(CW\*(C`id\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=linkpoint id=YourLinkpointID]
.Ve
.PP
or
.PP
.Vb 1
\&    Route linkpoint id YourLinkpointID
.Ve
.PP
or
.PP
.Vb 1
\&    Variable MV_PAYMENT_ID YourLinkpointID
.Ve
.PP
Required settings are \f(CW\*(C`id\*(C'\fR and \f(CW\*(C`keyfile\*(C'\fR.
.PP
The active settings are:
.IP "host" 4
.IX Item "host"
Your LinkPoint Secure Payment Gateway (\s-1LSPG\s0) hostname. Usually 
secure.linkpt.net (production) or staging.linkpt.net (testing).
.IP "keyfile" 4
.IX Item "keyfile"
File name of the merchant security certificate. This file should contain the
\&\s-1RSA\s0 private key and the certificate, otherwise you get an error like
\&\*(L"Unable to open/parse client certificate file.\*(R"
.IP "id" 4
.IX Item "id"
Store number assigned to your merchant account.
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 5
\&    Interchange         Linkpoint
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        auth            PREAUTH
\&        sale            SALE
\&        settle_prior    POSTAUTH
.Ve
.Sp
Default is \f(CW\*(C`sale\*(C'\fR.
.IP "check_sub" 4
.IX Item "check_sub"
Name of a Sub or GlobalSub to be called after the result hash has been 
received from LinkPoint. A reference to the modifiable result hash is
passed into the subroutine, and it should return true (in the Perl truth
sense) if its checks were successful, or false if not.
.Sp
This can come in handy since LinkPoint has no option to decline a charge
when \s-1AVS\s0 or \s-1CVV\s0 data come back negative.
.Sp
If you want to fail based on a bad \s-1AVS/CVV\s0 check, make sure you're only
doing an auth \*(-- \fBnot a sale\fR, or your customers would get charged on
orders that fail the \s-1AVS/CVV\s0 check and never get logged in your system!
.Sp
Add the parameters like this:
.Sp
.Vb 1
\&        Route  linkpoint  check_sub  link_check
.Ve
.Sp
This is a matching sample subroutine you could put in interchange.cfg:
.Sp
.Vb 10
\&        GlobalSub <<EOR
\&        sub link_check {
\&                my ($result) = @_;
\&                my $avs = $result\->{r_avs};
\&                my ($addr, $zip, $nothing, $cvv) = split m{}, $avs;
\&#::logDebug("avs=$avs, addr=$addr zip=$zip banks=$nothing cvv=$cvv");
\&                return 1 if $addr eq \*(AqY\*(Aq or $zip eq \*(AqY\*(Aq;
\&                return 1 if $addr eq \*(AqX\*(Aq and $zip eq \*(AqX\*(Aq;
\&                return 1 if $cvv =~ /^[MPSUX]$/;
\&                $result\->{MStatus} = \*(Aqfailure\*(Aq;
\&                if ($cvv eq \*(AqN\*(Aq || \*(Aq\*(Aq) {
\&                        $result\->{r_error} = "The card security code you entered does not match. Additional failed attempts may hold your available funds.";
\&                }
\&                else {
\&                        $result\->{r_error} = "The billing address you entered does not match the cardholder\*(Aqs billing address. Additional failed attempts may hold your available funds.";
\&                }
\&        }
\&        EOR
.Ve
.Sp
That would work equally well as a Sub in catalog.cfg. It will succeed if
either the address or zip is 'Y', or if both are unknown, or if the \s-1CVV\s0
matches or is unknown. If it fails, it sets the error message in the
result hash.
.Sp
Of course you can use this sub to do any other post-processing you
want as well.
.SS "Troubleshooting"
.IX Subsection "Troubleshooting"
If nothing works:
.IP "\(bu" 4
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.Sp
.Vb 1
\&    Require module Vend::Payment::Linkpoint
.Ve
.IP "\(bu" 4
Make sure lpperl (v3.0.012+) is installed and working. You can test to see
whether your Perl thinks they are:
.Sp
.Vb 1
\&    perl \-Mlpperl \-e \*(Aqprint "It works.\en"\*(Aq
.Ve
.Sp
If it \*(L"It works.\*(R" and returns to the prompt you should be \s-1OK \s0(presuming
they are in working order otherwise).
.IP "\(bu" 4
Make sure curl is installed and working.  Lpperl uses curl to contact 
Linkpoint.
.IP "\(bu" 4
Check the error logs, both catalog and global.
.IP "\(bu" 4
Make sure you set your payment parameters properly.
.IP "\(bu" 4
Try an order, then put this code in a page:
.Sp
.Vb 8
\&    <XMP>
\&    [calc]
\&        my $string = $Tag\->uneval( { ref => $Session\->{payment_result} });
\&        $string =~ s/{/{\en/;
\&        $string =~ s/,/,\en/g;
\&        return $string;
\&    [/calc]
\&    </XMP>
.Ve
.Sp
That should show what happened.
.SH "BUGS"
.IX Header "BUGS"
There is actually nothing *in* Vend::Payment::Linkpoint. It changes
packages to Vend::Payment and places things there.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stefan Hornburg (Racke) <racke@linuxia.de>
Ron Phipps <rphipps@reliant\-solutions.com>
