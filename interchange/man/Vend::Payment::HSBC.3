.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::HSBC 3"
.TH Vend::Payment::HSBC 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::HSBC \- Interchange HSBC Payments Module
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 5
\&    XML::Simple
\&    URI
\&    libwww\-perl
\&    Net::SSLeay
\&        HTTP::Request
.Ve
.PP
Test for current installations, eg: perl \-MXML::Simple \-e 'print \*(L"It works\en\*(R"'
To install perl modules do: \*(L"emerge dev\-perl/XML\-Simple\*(R" or so on Gentoo, or on other systems do
\&\*(L"perl \-MCPAN \-e  'install XML::Simple'\*(R"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::HSBC module implements the \s-1HSBC\s0 payment routine for use with Interchange.
.PP
#=========================
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Quick start:
.PP
Place this module in <ic_root>/lib/Vend/Payment, and call it in <ic_root>/interchange.cfg with
Require module Vend::Payment::HSBC. Ensure that your perl installation contains the modules
listed above and their pre-requisites.
.PP
Add a new payment route into catalog.cfg as follows:
Route hsbc gwhost https://www.secure\-epayments.apixml.hsbc.com 
Route hsbc tdshost https://www.ccpa.hsbc.com/ccpa
Route hsbc returnurl http://_\|_SERVER_NAME_\|_/ord/hsbctdsreturn
Route hsbc username XXnnnnnn
Route hsbc currency \s-1GBP \s0(default if not otherwise specified)
Route hsbc lcusername \*(L"\s-1XXX XXX\*(R" \s0(currency codes, if they give you some usernames in lowercase and others in uppercase)
Route hsbc clientidGBP	nnnnn (5 digit number for that currency)
Route hsbc clientidEUR	nnnnn
Route hsbc clientidXXX	nnnnn
Route hsbc clientalias XXnnnnnnnn (ie country code plus your 8\-digit merchant a/c id)
Route hsbc password xxx
Route hsbc txmode P (see below for others)
Route hsbc txtype Auth (PreAuth, Auth, PostAuth, Void, Credit, ForceInsertPreAuth,ForceInsertAuth, ReAuth, RePreAuth, ReviewPendingUpdate)
Route hsbc payment_type PaymentNoFraud (or Payment to use their fraud routines)
Route hsbc finalcheckoutpage ord/final (defaults to ord/checkout)
Route hsbc payment_type PaymentNoFraud (bypasses fraud checks, default is 'Payment' to run checks)
.PP
Route hsbc mail_txn_approved 1 (email you messages, a la Paypal, of payment made)
Route hsbc mail_txn_declined 1 (email you messages of payments declined, for monitoring fraud attempts) 
Route hsbc mail_txn_to (merchant's email address, defaults to \s-1EMAIL_SERVICE\s0 or \s-1ORDERS_TO\s0)
Route hsbc hsbcrequest gwpost (to bypass 3DSecure, defaults to tdspost)
.PP
Add the following block of fraud screening rules, including comments as reminders. 
# Default fraud rules: mark '1' to accept the order conditional upon further processing, '2' to display the message to the 
# customer. Mark '0' to reject the order, or to not display a message. Eg '0 2' will reject with the message.
# '1 0' will accept and complete the order but not display a message, '1 2' will accept and display a message.
# All of these cases will be 'approved' by default but marked as 'review before capturing funds' by the bank.
Route hsbc fraud_4 '1 2' # The customer's billing address is in the \s-1UK\s0 but they 
						  # are using an overseas issued card.
Route hsbc fraud_5 '1 2'  # The customer is using a card issued in a different 
						  # country to the billing address.
Route hsbc fraud_6 '0 2'  # Failed \s-1AVS\s0 check.  Both the first line of the address 
						  # and post code do not match the address held by the card issuer.
Route hsbc fraud_16 '0 2' # Failed \s-1AVS\s0 check.  Only the first line of the address matches 
						  # the address held by the card issuer.
Route hsbc fraud_17 '1 2' # Failed \s-1AVS\s0 check.  Only the post code matches the address held 				
						  # by the card issuer.
Route hsbc fraud_7 '1 0'  # The card issuer has not responded to the \s-1AVS\s0 request. 
Route hsbc fraud_8 '0 2'  # \s-1CVM\s0 does not match the card issuer's value.
Route hsbc fraud_9 '0 2'  # <BillToName> appears to be an invalid name. 
Route hsbc fraud_10 '0 2' # <BillToStreet1> appears to be an invalid address.
Route hsbc fraud_11 '0 2' # <BillToCity> appears to be an invalid address.
Route hsbc fraud_12 '0 0' # <BillToPostalCode> appears to be an invalid address. 
Route hsbc fraud_13 '1 0' # The \s-1AVS\s0 check cannot be performed on a British Forces Postal Office address.  
Route hsbc fraud_14 '0 0' # \s-1HSBC\s0 Merchant Services has recently identified a number of fraudulent 
						  # orders originating from this location.
Route hsbc fraud_15 '0 0' # \s-1HSBC\s0 Merchant Services has recently identified a number of fraudulent 
						  # orders originating from this location.
Route hsbc fraud_20 '0 0' # \s-1HSBC\s0 Merchant Services has recently observed a high incidence of 
						  # fraudulent transactions using the name '<BillToName>'.
Route hsbc fraud_22 '0 0' # \s-1HSBC\s0 Merchant Services has recently identified a number of fraudulent 
						  # orders using this range of card numbers with a \s-1UK\s0 billing address. 
Route hsbc fraud_23 '0 0' # \s-1HSBC\s0 Merchant Services has recently identified a number of fraudulent 
						  # orders using this range of card numbers with Irish billing addresses.
.PP
If these rules are triggered, [scratch pspfraudmsg] will hold the message to display
to your customer, and should be included into the receipt, mail_receipt and report. In all
cases where a rule is triggered and payment needs manual review and acceptance an email will
be sent to the merchant with details.
.PP
TxMode: P = production, 
		Y = test 'yes' response 
		N = test, 'no' response
		R = test, random 'yes|no' response;
		\s-1FY\s0 = test, FraudShield 'yes' response
		\s-1FN\s0 = test, FraudShield 'no' response
.PP
Alter etc/log_transaction to wrap the following code around the \*(L"[charge route...]\*(R" call 
found in ln 172 (or nearby):
	[if scratchd mstatus eq success]
	[tmp name=\*(L"charge_succeed\*(R"][scratch order_id][/tmp]
	[else]
	[tmp name=\*(L"charge_succeed\*(R"][charge route=\*(L"[var \s-1MV_PAYMENT_MODE\s0]\*(R" amount=\*(L"[scratch tmp_remaining]\*(R" order_id=\*(L"[value mv_transaction_id]\*(R"][/tmp]
	[/else]
	[/if]
and change [var \s-1MV_PAYMENT_MODE\s0] above to [value mv_payment_route] if you want to use Paypal or similar in conjunction with this
.PP
Also add this line just after '&final = yes' near the end of the credit_card section of etc/profiles.order:
	&set=mv_payment_route hsbc if you change [var \s-1MV_PAYMENT_MODE\s0] as above
.PP
If run from some sort of terminal this will also make refunds or send funds to a specified
credit card.
.SH "Changelog v 1.0.1, February 2013, change of ownership from eSecurePayments to GlobalIris and consequent change of URLs for gateway. v 1.0.0, October 2011. first public release"
.IX Header "Changelog v 1.0.1, February 2013, change of ownership from eSecurePayments to GlobalIris and consequent change of URLs for gateway. v 1.0.0, October 2011. first public release"
.SH "AUTHORS"
.IX Header "AUTHORS"
Lyn St George <lyn@zolotek.net>
