.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Vend::Payment::AuthorizeNet 3"
.TH Vend::Payment::AuthorizeNet 3 "2016-12-23" "perl v5.22.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Vend::Payment::AuthorizeNet \- Interchange AuthorizeNet Support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=authorizenet
\& 
\&        or
\& 
\&    [charge mode=authorizenet param1=value1 param2=value2]
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 1
\&  Net::SSLeay
\& 
\&    or
\&  
\&  LWP::UserAgent and Crypt::SSLeay
.Ve
.PP
Only one of these need be present and working.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::AuthorizeNet module implements the \fIauthorizenet()\fR routine
for use with Interchange. It is compatible on a call level with the other
Interchange payment modules.
.PP
To enable this module, place this directive in \f(CW\*(C`interchange.cfg\*(C'\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::AuthorizeNet
.Ve
.PP
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
Make sure CreditCardAuto is off (default in Interchange demos).
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`authorizenet\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \f(CW\*(C`catalog.cfg\*(C'\fR:
.PP
.Vb 1
\&    Variable   MV_PAYMENT_MODE  authorizenet
.Ve
.PP
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable, For example, the \f(CW\*(C`id\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=authorizenet id=YourAuthorizeNetID]
.Ve
.PP
or
.PP
.Vb 1
\&    Route authorizenet id YourAuthorizeNetID
.Ve
.PP
or
.PP
.Vb 1
\&    Variable MV_PAYMENT_ID      YourAuthorizeNetID
.Ve
.PP
The active settings are:
.IP "id" 4
.IX Item "id"
Your Authorize.net account \s-1ID,\s0 supplied by Authorize.net when you sign up.
Global parameter is \s-1MV_PAYMENT_ID.\s0
.IP "secret" 4
.IX Item "secret"
Your Authorize.net account password, supplied by Authorize.net when you sign up.
Global parameter is \s-1MV_PAYMENT_SECRET.\s0 This may not be needed for
actual charges.
.IP "host" 4
.IX Item "host"
The Authorize.net host to be used. The default is
.Sp
.Vb 1
\&    secure.authorize.net
.Ve
.Sp
Authorize.net recommends you use their Akamai host, and
to do so you set (as in the example above):
.Sp
.Vb 1
\&        Route authorizenet host secure2.authorize.net
.Ve
.IP "referer" 4
.IX Item "referer"
A valid referring url (match this with your setting on secure.authorize.net).
Global parameter is \s-1MV_PAYMENT_REFERER.\s0
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 8
\&    Interchange         AuthorizeNet
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        auth            AUTH_ONLY
\&        return          CREDIT
\&        reverse         PRIOR_AUTH_CAPTURE
\&        sale            AUTH_CAPTURE
\&        settle          CAPTURE_ONLY
\&        void            VOID
.Ve
.IP "remap" 4
.IX Item "remap"
This remaps the form variable names to the ones needed by Authorize.net. See
the \f(CW\*(C`Payment Settings\*(C'\fR heading in the Interchange documentation for use.
.IP "test" 4
.IX Item "test"
Set this to \f(CW\*(C`TRUE\*(C'\fR if you wish to operate in test mode, i.e. set the Authorize.net
\&\f(CW\*(C`x_Test_Request\*(C'\fR query parameter to \s-1TRUE.\s0
.Sp
Examples:
.Sp
.Vb 5
\&    Route    authorizenet  test  TRUE
\&        or
\&    Variable   MV_PAYMENT_TEST   TRUE
\&        or 
\&    [charge mode=authorizenet test=TRUE]
.Ve
.SS "Troubleshooting"
.IX Subsection "Troubleshooting"
Try the instructions above, then enable test mode. A test order should complete.
.PP
Disable test mode, then test in various Authorize.net error modes by
using the credit card number 4222 2222 2222 2222.
.PP
Then try a sale with the card number \f(CW\*(C`4111 1111 1111 1111\*(C'\fR
and a valid expiration date. The sale should be denied, and the reason should
be in [data session payment_error].
.PP
If nothing works:
.IP "\(bu" 4
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.Sp
.Vb 1
\&    Require module Vend::Payment::AuthorizeNet
.Ve
.IP "\(bu" 4
Make sure either Net::SSLeay or Crypt::SSLeay and LWP::UserAgent are installed
and working. You can test to see whether your Perl thinks they are:
.Sp
.Vb 1
\&    perl \-MNet::SSLeay \-e \*(Aqprint "It works\en"\*(Aq
.Ve
.Sp
or
.Sp
.Vb 1
\&    perl \-MLWP::UserAgent \-MCrypt::SSLeay \-e \*(Aqprint "It works\en"\*(Aq
.Ve
.Sp
If either one prints \*(L"It works.\*(R" and returns to the prompt you should be \s-1OK
\&\s0(presuming they are in working order otherwise).
.IP "\(bu" 4
Check the error logs, both catalog and global.
.IP "\(bu" 4
Make sure you set your payment parameters properly.
.IP "\(bu" 4
Try an order, then put this code in a page:
.Sp
.Vb 8
\&    <XMP>
\&    [calc]
\&        my $string = $Tag\->uneval( { ref => $Session\->{payment_result} });
\&        $string =~ s/{/{\en/;
\&        $string =~ s/,/,\en/g;
\&        return $string;
\&    [/calc]
\&    </XMP>
.Ve
.Sp
That should show what happened.
.IP "\(bu" 4
If all else fails, consultants are available to help with integration for a fee.
See http://www.icdevgroup.org/ for mailing lists and other information.
.SH "BUGS"
.IX Header "BUGS"
There is actually nothing *in* Vend::Payment::AuthorizeNet. It changes packages
to Vend::Payment and places things there.
.SH "AUTHORS"
.IX Header "AUTHORS"
Mark Stosberg <mark@summersault.com>.
Based on original code by Mike Heins <mike@perusion.com>.
.SH "CREDITS"
.IX Header "CREDITS"
.Vb 5
\&    Jeff Nappi <brage@cyberhighway.net>
\&    Paul Delys <paul@gi.alaska.edu>
\&    webmaster@nameastar.net
\&    Ray Desjardins <ray@dfwmicrotech.com>
\&    Nelson H. Ferrari <nferrari@ccsc.com>
.Ve
